@page "/groktravel"

@using System.Net.Http.Json
@using Markdig
@using System.Text.RegularExpressions

@inject HttpClient HttpClient

<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h6" Color="Color.Primary">Travel Itinerary Helper</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Info" Color="Color.Inherit" Href="https://docs.x.ai" Target="_blank" />
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
            <MudPaper Elevation="2" Class="pa-4 chat-container">
                @foreach (var message in messages)
                {
                    <MudCard Class="@(message.IsUser ? "user-message" : "assistant-message")" Elevation="0">
                        <MudCardContent>
                            <MudText Typo="@(message.IsUser ? Typo.body2 : Typo.body1)">
                                @if (message.IsUser)
                                {
                                    <strong>You:</strong>
                                    <br/>
                                    @message.Content
                                }
                                else
                                {
                                    <strong>Grok:</strong>
                                    @if (!string.IsNullOrEmpty(message.Content))
                                    {
                                        try
                                        {
                                            <div class="markdown-body">@MarkdownToHtml(message.Content)</div>

                                        }
                                        catch (Exception ex)
                                        {
                                            <MudText Color="Color.Error">Failed to render response: @ex.Message</MudText>
                                            <MudText>@message.Content</MudText>
                                        }
                                    }
                                    else
                                    {
                                        <MudText Color="Color.Warning">No content received.</MudText>
                                    }
                                }
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </MudPaper>
            <MudPaper Elevation="2" Class="pa-4 mt-4">
                <MudText Typo="Typo.caption" Color="Color.Secondary">Suggested prompts:</MudText>
                <MudChipSet T="String">
                    @foreach (var suggestion in suggestions)
                    {
                        <MudChip Text="@suggestion" Color="Color.Primary" OnClick="@(() => SetPrompt(suggestion))" />
                    }
                </MudChipSet>
                <MudTextField @bind-Value="prompt"
                Label="Ask about travel plans..."
                Variant="Variant.Outlined"
                Lines="2"
                MaxLength="500"
                Counter="500"
                Immediate="true"
                Class="mt-4"
                Validation="@(new Func<string, IEnumerable<string>>(ValidatePrompt))"
                Disabled="@isLoading" />
                <MudButton Variant="Variant.Filled"
                Color="Color.Primary"
                OnClick="SendPrompt"
                Disabled="@(isLoading || string.IsNullOrWhiteSpace(prompt))"
                Class="mt-4">
                    @(isLoading ? "Sending..." : "Send")
                </MudButton>
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Small" Class="ml-4" />
                }
                @if (!string.IsNullOrEmpty(error))
                {
                    <MudAlert Severity="Severity.Error" Class="mt-4">@error</MudAlert>
                }
            </MudPaper>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private string prompt = "";
    private string error = "";
    private bool isLoading = false;
    private List<Message> messages = new();
    private readonly List<string> suggestions = new()
    {
        "Plan a 3-day trip to Queenstown",
        "Best activities in Auckland",
        "Recommend hotels in Wellington",
        "Create an itinerary for New Zealand South Island"
    };
    private MudPaper chatContainer;
    // private ElementReference chatContainerRef => chatContainer?.GetElementReference() ?? default;

    private class Message
    {
        public bool IsUser { get; set; }
        public string Content { get; set; }
    }

    private class GrokResponse
    {
        public string Response { get; set; }
    }

    private IEnumerable<string> ValidatePrompt(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            yield return "Prompt is required.";
        if (input.Length > 500)
            yield return "Prompt cannot exceed 500 characters.";
        if (!Regex.IsMatch(input, @"\b(travel|itinerary|destination|trip|vacation|tour|flight|hotel|activity|plan|visit|explore|journey|adventure)\b", RegexOptions.IgnoreCase))
            yield return "Prompt must be related to travel or itinerary planning.";
    }

    private void SetPrompt(string suggestion)
    {
        prompt = suggestion;
        error = ""; // Clear any previous errors
    }

    private async Task SendPrompt()
    {
        if (string.IsNullOrWhiteSpace(prompt))
        {
            error = "Please enter a prompt.";
            return;
        }

        isLoading = true;
        error = "";
        messages.Add(new Message { IsUser = true, Content = prompt });
        var userPrompt = prompt;
        prompt = "";

        try
        {
            var request = new { Prompt = userPrompt };
            var httpResponse = await HttpClient.PostAsJsonAsync("api/Grok", request);
            httpResponse.EnsureSuccessStatusCode();

            var responseBody = await httpResponse.Content.ReadAsStringAsync();
            Console.WriteLine($"Raw API response: {responseBody}"); // Log to browser console for debugging

            var result = await httpResponse.Content.ReadFromJsonAsync<GrokResponse>();
            var response = result?.Response;

            if (string.IsNullOrEmpty(response))
            {
                error = "Received an empty response from the server.";
                messages.Add(new Message { IsUser = false, Content = "Sorry, I couldn't generate a response. Please try again." });
            }
            else
            {
                Console.WriteLine($"Parsed response: {response}"); // Log parsed response
                messages.Add(new Message { IsUser = false, Content = response });
            }

            //messages.Add(new Message { IsUser = false, Content = "# Hello, Markdown!\nThis is a **test**." });

            // Auto-scroll to the bottom of the chat
            // if (chatContainerRef.Id != null)
            // {
            //     await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainerRef);
            // }
        }
        catch (HttpRequestException ex)
        {
            error = ex.StatusCode switch
            {
                System.Net.HttpStatusCode.BadRequest => "Invalid prompt. Please check your input.",
                System.Net.HttpStatusCode.Unauthorized => "API authentication failed. Please contact support.",
                System.Net.HttpStatusCode.TooManyRequests => "Rate limit exceeded. Please try again later.",
                System.Net.HttpStatusCode.NotFound => "API endpoint not found. Please contact support.",
                _ => $"Error: {ex.Message}"
            };
            messages.Add(new Message { IsUser = false, Content = $"Error: {error}" });
        }
        catch (Exception ex)
        {
            error = $"Unexpected error: {ex.Message}";
            messages.Add(new Message { IsUser = false, Content = $"Error: {error}" });
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Ensure UI updates
        }
    }

    private MarkupString MarkdownToHtml(string markdown)
    {
        if (string.IsNullOrEmpty(markdown))
        {
            Console.WriteLine("Markdown input is empty.");
            return new MarkupString("");
        }

        try
        {
            var pipeline = new MarkdownPipelineBuilder()
                .UseAdvancedExtensions()
                .Build();
            var html = Markdown.ToHtml(markdown, pipeline);
            Console.WriteLine($"Markdown converted to HTML: {html}");
            return new MarkupString(html);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Markdown conversion failed: {ex.Message}");
            throw; // Re-throw to be caught in the UI
        }
    }
}

<style scoped>
    .chat-container {
        max-height: 60vh;
        overflow-y: auto;
        padding: 16px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
    }

    .user-message {
        background-color: #e3f2fd;
        margin: 8px 16px 8px 32px;
        padding: 12px;
        border-radius: 8px;
    }

    .assistant-message {
        background-color: #f5f5f5;
        margin: 8px 32px 8px 16px;
        padding: 12px;
        border-radius: 8px;
    }

    .markdown-body h1, .markdown-body h2, .markdown-body h3 {
        margin-top: 8px;
        margin-bottom: 8px;
    }

    .markdown-body ul {
        padding-left: 20px;
        margin: 8px 0;
    }

    .markdown-body strong {
        font-weight: 600;
    }
</style>